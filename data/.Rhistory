#'Plots the relative biomass of each group from a run of ecosim.
#'
#'@family Rpath functions
#'
#'@param Rsim.output Rpath ecosim run created by the rsim.run() function.
#'
#'@return Creates a figure of relative biomass.
#'@import data.table
#'@importFrom grDevices rainbow
#'@export
rsim.plot <- function(Rsim.output, spname="all", indplot = F, ...){
opar <- par(no.readonly = T)
if(indplot == F){
# KYA April 2020 this seems incorrect?
#biomass <- Rsim.output$out_Biomass[, 2:ncol(Rsim.output$out_Biomass)]
if("all" %in% spname){spname <- colnames(Rsim.output$out_Biomass[,2:ncol(Rsim.output$out_Biomass)])}
biomass <- Rsim.output$out_Biomass[, spname]
n <- ncol(biomass)
start.bio <- biomass[1, ]
start.bio[which(start.bio == 0)] <- 1
rel.bio <- matrix(NA, dim(biomass)[1], dim(biomass)[2])
for(isp in 1:n) rel.bio[, isp] <- biomass[, isp] / start.bio[isp]
}
if(indplot == T){
spnum <- which(Rsim.output$params$spname == spname)
biomass <- Rsim.output$out_Biomass[, spnum]
n <- 1
rel.bio <- biomass / biomass[1]
}
ymax <- max(rel.bio) + 0.1 * max(rel.bio)
ymin <- min(rel.bio) - 0.1 * min(rel.bio)
ifelse(indplot, xmax <- length(biomass), xmax <- nrow(biomass))
#Plot relative biomass
opar <- par(mar = c(4, 6, 2, 0))
#Create space for legend
plot.new()
l <- legend(0, 0, bty='n', spname,
plot=FALSE, fill = line.col, cex = 0.6)
# calculate right margin width in ndc
w <- grconvertX(l$rect$w, to='ndc') - grconvertX(0, to='ndc')
par(omd=c(0, 1-w, 0, 1))
plot(0, 0, ylim = c(ymin, ymax), xlim = c(0, xmax),
axes = F, xlab = '', ylab = '', type = 'n', ...)
axis(1)
axis(2, las = T)
box(lwd = 2)
mtext(1, text = 'Months', line = 2.5, cex = 1.8)
mtext(2, text = 'Relative Biomass', line = 3, cex = 1.8)
line.col <- rainbow(n)
for(i in 1:n){
if(indplot == T) lines(rel.bio,      col = line.col[i], lwd = 3)
if(indplot == F) lines(rel.bio[, i], col = line.col[i], lwd = 3)
}
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,
spname, fill = line.col, cex = 0.6)
par(opar)
}
#'Plots the relative biomass of each group from a run of ecosim.
#'
#'@family Rpath functions
#'
#'@param Rsim.output Rpath ecosim run created by the rsim.run() function.
#'
#'@return Creates a figure of relative biomass.
#'@import data.table
#'@importFrom grDevices rainbow
#'@export
rsim.plot <- function(Rsim.output, spname="all", indplot = F, ...){
opar <- par(no.readonly = T)
if(indplot == F){
# KYA April 2020 this seems incorrect?
#biomass <- Rsim.output$out_Biomass[, 2:ncol(Rsim.output$out_Biomass)]
if("all" %in% spname){spname <- colnames(Rsim.output$out_Biomass[,2:ncol(Rsim.output$out_Biomass)])}
biomass <- Rsim.output$out_Biomass[, spname]
n <- ncol(biomass)
start.bio <- biomass[1, ]
start.bio[which(start.bio == 0)] <- 1
rel.bio <- matrix(NA, dim(biomass)[1], dim(biomass)[2])
for(isp in 1:n) rel.bio[, isp] <- biomass[, isp] / start.bio[isp]
}
if(indplot == T){
spnum <- which(Rsim.output$params$spname == spname)
biomass <- Rsim.output$out_Biomass[, spnum]
n <- 1
rel.bio <- biomass / biomass[1]
}
ymax <- max(rel.bio) + 0.1 * max(rel.bio)
ymin <- min(rel.bio) - 0.1 * min(rel.bio)
ifelse(indplot, xmax <- length(biomass), xmax <- nrow(biomass))
#Plot relative biomass
opar <- par(mar = c(4, 6, 2, 0))
#Create space for legend
plot.new()
l <- legend(0, 0, bty='n', spname,
plot=FALSE, fill = line.col, cex = 0.6)
# calculate right margin width in ndc
w <- grconvertX(l$rect$w, to='ndc') - grconvertX(0, to='ndc')
par(omd=c(0, 1-w, 0, 1))
plot(0, 0, ylim = c(ymin, ymax), xlim = c(0, xmax),
axes = F, xlab = '', ylab = '', type = 'n', ...)
axis(1)
axis(2, las = T)
box(lwd = 2)
mtext(1, text = 'Months', line = 2.5, cex = 1.8)
mtext(2, text = 'Relative Biomass', line = 3, cex = 1.8)
line.col <- rainbow(n)
for(i in 1:n){
if(indplot == T) lines(rel.bio,      col = line.col[i], lwd = 3)
if(indplot == F) lines(rel.bio[, i], col = line.col[i], lwd = 3)
}
legend(par('usr')[2], par('usr')[4], bty='n', xpd=NA,
spname, fill = line.col, cex = 0.6)
par(opar)
}
View(rsim.plot)
View(rsim.plot)
knitr::kable(REco.params$model[, list(Group, Type, Biomass, EE)],
caption = 'Example of assigning a specific slot or a whole column')
#Groups and types for the R Ecosystem
groups <- c('Seabirds', 'Whales', 'Seals', 'JuvRoundfish1', 'AduRoundfish1',
'JuvRoundfish2', 'AduRoundfish2', 'JuvFlatfish1', 'AduFlatfish1',
'JuvFlatfish2', 'AduFlatfish2', 'OtherGroundfish', 'Foragefish1',
'Foragefish2', 'OtherForagefish', 'Megabenthos', 'Shellfish',
'Macrobenthos', 'Zooplankton', 'Phytoplankton', 'Detritus',
'Discards', 'Trawlers', 'Midwater', 'Dredgers')
types  <- c(rep(0, 19), 1, rep(2, 2), rep(3, 3))
stgroups <- c(rep(NA, 3), rep('Roundfish1', 2), rep('Roundfish2', 2),
rep('Flatfish1', 2), rep('Flatfish2', 2), rep(NA, 14))
REco.params <- create.rpath.params(group = groups, type = types, stgroup = stgroups)
install.packages("remotes")
remotes::install_github("andybeet/buoydata")
remotes::install_github("NOAA-EDAB/Rpath")
library(Rpath)
knitr::opts_chunk$set(
comment = '#>',
collapse = T)
library(Rpath); library(data.table)
#Groups and types for the R Ecosystem
groups <- c('Seabirds', 'Whales', 'Seals', 'JuvRoundfish1', 'AduRoundfish1',
'JuvRoundfish2', 'AduRoundfish2', 'JuvFlatfish1', 'AduFlatfish1',
'JuvFlatfish2', 'AduFlatfish2', 'OtherGroundfish', 'Foragefish1',
'Foragefish2', 'OtherForagefish', 'Megabenthos', 'Shellfish',
'Macrobenthos', 'Zooplankton', 'Phytoplankton', 'Detritus',
'Discards', 'Trawlers', 'Midwater', 'Dredgers')
types  <- c(rep(0, 19), 1, rep(2, 2), rep(3, 3))
stgroups <- c(rep(NA, 3), rep('Roundfish1', 2), rep('Roundfish2', 2),
rep('Flatfish1', 2), rep('Flatfish2', 2), rep(NA, 14))
REco.params <- create.rpath.params(group = groups, type = types, stgroup = stgroups)
View(REco.params)
View(REco.params)
knitr::kable(REco.params$model[, list(Group, Type, Biomass, EE)],
caption = 'Example of assigning a specific slot or a whole column')
#Model
biomass <- c(0.0149, 0.454, NA, NA, 1.39, NA, 5.553, NA, 5.766, NA,
0.739, 7.4, 5.1, 4.7, 5.1, NA, 7, 17.4, 23, 10, rep(NA, 5))
pb <- c(0.098, 0.031, 0.100, 2.026, 0.42, 2.1, 0.425, 1.5, 0.26, 1.1, 0.18, 0.6,
0.61, 0.65, 1.5, 0.9, 1.3, 7, 39, 240, rep(NA, 5))
qb <- c(76.750, 6.976, 34.455, NA, 2.19, NA, 3.78, NA, 1.44, NA, 1.69,
1.764, 3.52, 5.65, 3.6, 2.984, rep (NA, 9))
REco.params$model[, Biomass := biomass]
REco.params$model[, PB := pb]
REco.params$model[, QB := qb]
#EE for groups w/o biomass
REco.params$model[Group %in% c('Seals', 'Megabenthos'), EE := 0.8]
#Production to Consumption for those groups without a QB
REco.params$model[Group %in% c('Shellfish', 'Zooplankton'), ProdCons:= 0.25]
REco.params$model[Group == 'Macrobenthos', ProdCons := 0.35]
#Biomass accumulation and unassimilated consumption
REco.params$model[, BioAcc  := c(rep(0, 22), rep(NA, 3))]
REco.params$model[, Unassim := c(rep(0.2, 18), 0.4, rep(0, 3), rep(NA, 3))]
#Detrital Fate
REco.params$model[, Detritus := c(rep(1, 20), rep(0, 5))]
REco.params$model[, Discards := c(rep(0, 22), rep(1, 3))]
#Fisheries
#Landings
trawl  <- c(rep(0, 4), 0.08, 0, 0.32, 0, 0.09, 0, 0.05, 0.2, rep(0, 10), rep(NA, 3))
mid    <- c(rep(0, 12), 0.3, 0.08, 0.02, rep(0, 7), rep(NA, 3))
dredge <- c(rep(0, 15), 0.1, 0.5, rep(0, 5), rep(NA, 3))
REco.params$model[, Trawlers := trawl]
REco.params$model[, Midwater := mid]
REco.params$model[, Dredgers := dredge]
#Discards
trawl.d  <- c(1e-5, 1e-7, 0.001, 0.001, 0.005, 0.001, 0.009, 0.001, 0.04, 0.001,
0.01, 0.08, 0.001, 0.001, 0.001, rep(0, 7), rep(NA, 3))
mid.d    <- c(rep(0, 2), 0.001, 0.001, 0.01, 0.001, 0.01, rep(0, 4), 0.05, 0.05,
0.01, 0.01, rep(0, 7), rep(NA, 3))
dredge.d <- c(rep(0, 3), 0.001, 0.05, 0.001, 0.05, 0.001, 0.05, 0.001, 0.01, 0.05,
rep(0, 3), 0.09, 0.01, 1e-4, rep(0, 4), rep(NA, 3))
REco.params$model[, Trawlers.disc := trawl.d]
REco.params$model[, Midwater.disc := mid.d]
REco.params$model[, Dredgers.disc := dredge.d]
#Groups and types for the R Ecosystem
groups <- c('Seabirds', 'Whales', 'Seals', 'JuvRoundfish1', 'AduRoundfish1',
'JuvRoundfish2', 'AduRoundfish2', 'JuvFlatfish1', 'AduFlatfish1',
'JuvFlatfish2', 'AduFlatfish2', 'OtherGroundfish', 'Foragefish1',
'Foragefish2', 'OtherForagefish', 'Megabenthos', 'Shellfish',
'Macrobenthos', 'Zooplankton', 'Phytoplankton', 'Detritus',
'Discards', 'Trawlers', 'Midwater', 'Dredgers')
types  <- c(rep(0, 19), 1, rep(2, 2), rep(3, 3))
stgroups <- c(rep(NA, 3), rep('Roundfish1', 2), rep('Roundfish2', 2),
rep('Flatfish1', 2), rep('Flatfish2', 2), rep(NA, 14))
REco.params <- create.rpath.params(group = groups, type = types, stgroup = stgroups)
knitr::kable(REco.params$model, caption = 'Example of the model list created using the
`create.rpath.param` function')
#Example of filling specific slots
REco.params$model[Group %in% c('Seals', 'Megabenthos'), EE := 0.8]
#Example of filling an entire column
biomass <- c(0.0149, 0.454, NA, NA, 1.39, NA, 5.553, NA, 5.766, NA,
0.739, 7.4, 5.1, 4.7, 5.1, NA, 7, 17.4, 23, 10, rep(NA, 5))
REco.params$model[, Biomass := biomass]
knitr::kable(REco.params$model, caption = 'Example of the model list created using the
`create.rpath.param` function')
#Example of filling specific slots
REco.params$model[Group %in% c('Seals', 'Megabenthos'), EE := 0.8]
#Example of filling an entire column
biomass <- c(0.0149, 0.454, NA, NA, 1.39, NA, 5.553, NA, 5.766, NA,
0.739, 7.4, 5.1, 4.7, 5.1, NA, 7, 17.4, 23, 10, rep(NA, 5))
REco.params$model[, Biomass := biomass]
knitr::kable(REco.params$model[, list(Group, Type, Biomass, EE)],
caption = 'Example of assigning a specific slot or a whole column')
#Model
biomass <- c(0.0149, 0.454, NA, NA, 1.39, NA, 5.553, NA, 5.766, NA,
0.739, 7.4, 5.1, 4.7, 5.1, NA, 7, 17.4, 23, 10, rep(NA, 5))
pb <- c(0.098, 0.031, 0.100, 2.026, 0.42, 2.1, 0.425, 1.5, 0.26, 1.1, 0.18, 0.6,
0.61, 0.65, 1.5, 0.9, 1.3, 7, 39, 240, rep(NA, 5))
qb <- c(76.750, 6.976, 34.455, NA, 2.19, NA, 3.78, NA, 1.44, NA, 1.69,
1.764, 3.52, 5.65, 3.6, 2.984, rep (NA, 9))
REco.params$model[, Biomass := biomass]
REco.params$model[, PB := pb]
REco.params$model[, QB := qb]
#EE for groups w/o biomass
REco.params$model[Group %in% c('Seals', 'Megabenthos'), EE := 0.8]
#Production to Consumption for those groups without a QB
REco.params$model[Group %in% c('Shellfish', 'Zooplankton'), ProdCons:= 0.25]
REco.params$model[Group == 'Macrobenthos', ProdCons := 0.35]
#Biomass accumulation and unassimilated consumption
REco.params$model[, BioAcc  := c(rep(0, 22), rep(NA, 3))]
REco.params$model[, Unassim := c(rep(0.2, 18), 0.4, rep(0, 3), rep(NA, 3))]
#Detrital Fate
REco.params$model[, Detritus := c(rep(1, 20), rep(0, 5))]
REco.params$model[, Discards := c(rep(0, 22), rep(1, 3))]
#Fisheries
#Landings
trawl  <- c(rep(0, 4), 0.08, 0, 0.32, 0, 0.09, 0, 0.05, 0.2, rep(0, 10), rep(NA, 3))
mid    <- c(rep(0, 12), 0.3, 0.08, 0.02, rep(0, 7), rep(NA, 3))
dredge <- c(rep(0, 15), 0.1, 0.5, rep(0, 5), rep(NA, 3))
REco.params$model[, Trawlers := trawl]
REco.params$model[, Midwater := mid]
REco.params$model[, Dredgers := dredge]
#Discards
trawl.d  <- c(1e-5, 1e-7, 0.001, 0.001, 0.005, 0.001, 0.009, 0.001, 0.04, 0.001,
0.01, 0.08, 0.001, 0.001, 0.001, rep(0, 7), rep(NA, 3))
mid.d    <- c(rep(0, 2), 0.001, 0.001, 0.01, 0.001, 0.01, rep(0, 4), 0.05, 0.05,
0.01, 0.01, rep(0, 7), rep(NA, 3))
dredge.d <- c(rep(0, 3), 0.001, 0.05, 0.001, 0.05, 0.001, 0.05, 0.001, 0.01, 0.05,
rep(0, 3), 0.09, 0.01, 1e-4, rep(0, 4), rep(NA, 3))
REco.params$model[, Trawlers.disc := trawl.d]
REco.params$model[, Midwater.disc := mid.d]
REco.params$model[, Dredgers.disc := dredge.d]
knitr::kable(REco.params$model,
caption = 'Example of completed model list')
REco.params$diet[Group == 'OtherGroundfish', Seabirds := 0.1]
whale.diet <- c(rep(NA, 3), 0.01, NA, 0.01, NA, 0.01, NA, 0.01, rep(NA, 4), 0.1,
rep(NA, 3), 0.86, rep(NA, 3), NA)
REco.params$diet[, Whales := whale.diet]
whale.diet <- c(rep(NA, 3), 0.01, NA, 0.01, NA, 0.01, NA, 0.01, rep(NA, 4), 0.1,
rep(NA, 3), 0.86, rep(NA, 3), NA)
REco.params$diet[, Whales := whale.diet]
knitr::kable(REco.params$diet[, list(Group, Seabirds, Whales)])
REco.params$diet[, Seabirds        := c(rep(NA, 11), 0.1, 0.25, 0.2, 0.15,
rep(NA, 6), 0.3, NA)]
REco.params$diet[, Whales          := c(rep(NA, 3), 0.01, NA, 0.01, NA, 0.01,
NA, 0.01, rep(NA, 4), 0.1, rep(NA, 3),
0.86, rep(NA, 3), NA)]
REco.params$diet[, Seals           := c(rep(NA, 3), 0.05, 0.1, 0.05, 0.2, 0.005,
0.05, 0.005, 0.01, 0.24, rep(0.05, 4),
0.09, rep(NA, 5), NA)]
REco.params$diet[, JuvRoundfish1   := c(rep(NA, 3), rep(c(1e-4, NA), 4), 1e-3,
rep(NA, 2), 0.05, 1e-4, NA, .02, 0.7785,
0.1, 0.05, NA, NA)]
REco.params$diet[, AduRoundfish1   := c(rep(NA, 5), 1e-3, 0.01, 1e-3, 0.05, 1e-3,
0.01, 0.29, 0.1, 0.1, 0.347, 0.03, NA,
0.05, 0.01, rep(NA, 3), NA)]
REco.params$diet[, JuvRoundfish2   := c(rep(NA, 3), rep(c(1e-4, NA), 4), 1e-3,
rep(NA, 2), 0.05, 1e-4, NA, .02, 0.7785,
0.1, .05, NA, NA)]
REco.params$diet[, AduRoundfish2   := c(rep(NA, 3), 1e-4, NA, 1e-4, NA, rep(1e-4, 4),
0.1, rep(0.05, 3), 0.2684, 0.01, 0.37, 0.001,
NA, 0.1, NA, NA)]
REco.params$diet[, JuvFlatfish1    := c(rep(NA, 3), rep(c(1e-4, NA), 4), rep(NA, 3),
rep(1e-4, 2), NA, 0.416, 0.4334, 0.1, 0.05,
NA, NA)]
REco.params$diet[, AduFlatfish1    := c(rep(NA, 7), rep(1e-4, 5), rep(NA, 2), 0.001,
0.05, 0.001, 0.6, 0.2475, NA, 0.1, NA, NA)]
REco.params$diet[, JuvFlatfish2    := c(rep(NA, 3), rep(c(1e-4, NA), 4), rep(NA, 3),
rep(1e-4, 2), NA, 0.416, 0.4334, 0.1, 0.05,
NA, NA)]
REco.params$diet[, AduFlatfish2    := c(rep(NA, 7), 1e-4, NA, 1e-4, rep(NA, 4),
rep(1e-4, 3), 0.44, 0.3895, NA, 0.17, NA, NA)]
REco.params$diet[, OtherGroundfish := c(rep(NA, 3), rep(1e-4, 8), 0.05, 0.08, 0.0992,
0.3, 0.15, 0.01, 0.3, 0.01, rep(NA, 3), NA)]
REco.params$diet[, Foragefish1     := c(rep(NA, 3), rep(c(1e-4, NA), 4), rep(NA, 7),
0.8196, 0.06, 0.12, NA, NA)]
REco.params$diet[, Foragefish2     := c(rep(NA, 3), rep(c(1e-4, NA), 4), rep(NA, 7),
0.8196, 0.06, 0.12, NA, NA)]
REco.params$diet[, OtherForagefish := c(rep(NA, 3), rep(c(1e-4, NA), 4), rep(NA, 7),
0.8196, 0.06, 0.12, NA, NA)]
REco.params$diet[, Megabenthos     := c(rep(NA, 15), 0.1, 0.03, 0.55, rep(NA, 2), 0.32,
NA, NA)]
REco.params$diet[, Shellfish       := c(rep(NA, 18), 0.3, 0.5, 0.2, NA, NA)]
REco.params$diet[, Macrobenthos    := c(rep(NA, 16), 0.01, rep(0.2, 2), NA, 0.59, NA, NA)]
REco.params$diet[, Zooplankton     := c(rep(NA, 18), 0.2, 0.6, 0.2, NA, NA)]
knitr::opts_chunk$set(echo = TRUE)
install.packages("remotes")
remotes::install_github("NOAA-EDAB/Rpath")
library(Rpath); library(data.table)
PEC_param<-read.rpath.params(modfile = ~/data/PEC_param)
knitr::opts_chunk$set(echo = TRUE)
install.packages("remotes")
remotes::install_github("NOAA-EDAB/Rpath")
library(Rpath); library(data.table)
install.packages("remotes")
knitr::opts_chunk$set(echo = TRUE)
remotes::install_github("NOAA-EDAB/Rpath")
library(Rpath); library(data.table)
knitr::opts_chunk$set(echo = TRUE)
remotes::install_github("NOAA-EDAB/Rpath")
library(Rpath); library(data.table)
library(rlang)
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
remotes::install_github("NOAA-EDAB/Rpath")
library(rlang)
library(Rpath); library(data.table)
PEC_param<-read.rpath.params(modfile = ~/data/PEC_param)
PEC_param<-read.rpath.params(modfile = ~/data/PEC_param)
PEC_param<-read.rpath.params(modfile = ~/data/PEC_param)
PEC_param<-read.rpath.params(modfile = ~data/PEC_param)
library(readr)
PEC_Annual_Basic_input <- read_csv("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data/PEC Annual-Basic input.csv")
View(PEC_Annual_Basic_input)
PEC_param<-read.rpath.params(modfile = ~data/PEC_param)
PEC_param<-read.rpath.params(modfile = /~data/PEC_param)
PEC_param<-read.rpath.params(modfile = "~/data/PEC_Annual_Basic input.csv")
PEC_param<-read.rpath.params(modfile = "~/data/PEC_Annual_Basic input.csv")
PEC_param<-read.rpath.params(modfile = "./data/PEC_Annual_Basic input.csv")
PEC_param<-read.rpath.params(modfile = "./data/PEC_Annual_Basic input.csv")
PEC_param<-read.rpath.params(modfile = "./data/PEC_Annual_Basic input.csv")
PEC_param<-read.rpath.params(modfile = "./data/PEC_Annual_Basic input.csv")
PEC_param<-read.rpath.params(modfile = ./data/PEC_Annual_Basic input.csv)
PEC_param<-read.rpath.params(modfile = ~/ParanaguaBay_FoodWeb/data/PEC_Annual_Basic input.csv)
PEC_param<-read.rpath.params(modfile = "~/ParanaguaBay_FoodWeb/data/PEC_Annual_Basic input.csv")
PEC_param<-read.rpath.params(modfile = "~/ParanaguaBay_FoodWeb/data/PEC_Annual_Basic input.csv")
PEC_param<-read.rpath.params(modfile = "~/Desktop/ParanaguaBay_FoodWeb/data/PEC_Annual_Basic input.csv")
library(readr)
PEC_Annual_Diet_composition <- read_csv("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data/PEC Annual-Diet composition.csv")
View(PEC_Annual_Diet_composition)
library(readr)
PEC_Annual_Pedigree <- read_csv("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data/PEC Annual-Pedigree.csv")
View(PEC_Annual_Pedigree)
PEC_param<-create.rpath.params(modfile = PEC_Annual_Basic_input, dietfile = PEC_Annual_Diet_composition, pedfile = PEC_Annual_Pedigree)
PEC_param<-create.rpath.params(modfile = PEC_Annual_Basic_input, dietfile = PEC_Annual_Diet_composition, pedfile = PEC_Annual_Pedigree)
PEC_param<-read.rpath.params(modfile = PEC_Annual_Basic_input, dietfile = PEC_Annual_Diet_composition, pedfile = PEC_Annual_Pedigree)
PEC_param<-check.rpath.params(modfile = PEC_Annual_Basic_input, dietfile = PEC_Annual_Diet_composition, pedfile = PEC_Annual_Pedigree)
setwd(C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data)
setwd("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data")
PEC_param<-read.rpath.params(modfile = "PEC_Annual-Basic input.csv" dietfile = "PEC_Annual-Diet compostion.csv", pedfile ="PEC_Annual-Pedigree.csv" )
setwd("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data")
PEC_param<-read.rpath.params(modfile = "PEC_Annual-Basic input.csv", dietfile = "PEC_Annual-Diet compostion.csv", pedfile ="PEC_Annual-Pedigree.csv" )
setwd("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data")
PEC_param<-read.rpath.params(modfile = "PEC_Annual-Basic input.csv", dietfile = "PEC_Annual-Diet compostion.csv", pedfile ="PEC_Annual-Pedigree.csv" )
setwd("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data")
PEC_param<-read.rpath.params(modfile = "PEC_Annual_Basic input.csv", dietfile = "PEC_Annual-Diet compostion.csv", pedfile ="PEC_Annual-Pedigree.csv" )
library(rlang)
setwd("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data")
PEC_param<-read.rpath.params(modfile = "PEC_Annual_Basic input.csv", dietfile = "PEC_Annual-Diet compostion.csv", pedfile ="PEC_Annual-Pedigree.csv" )
PEC_param<-read.rpath.params(modfile = "C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data/PEC_Annual_Basic input.csv", dietfile = "PEC_Annual-Diet compostion.csv", pedfile ="PEC_Annual-Pedigree.csv" )
setwd("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data")
PEC_param<-read.rpath.params("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data/PEC_Annual_Basic input.csv", "PEC_Annual-Diet compostion.csv", pedfile ="PEC_Annual-Pedigree.csv" )
PEC_param<-read.rpath.params("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data/PEC_Annual-Basic input.csv", "PEC_Annual-Diet compostion.csv", pedfile ="PEC_Annual-Pedigree.csv" )
setwd("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data")
PEC_param<-read.rpath.params("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data/PEC_Annual-Basic input.csv", "PEC_Annual-Diet compostion.csv", pedfile ="PEC_Annual-Pedigree.csv" )
PEC_param<-read.rpath.params("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data/PEC_Annual-Basic input.csv", "PEC_Annual-Diet compostion.csv", pedfile ="PEC_Annual-Pedigree.csv", sep=";" )
PEC_param<-read.rpath.params("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data/PEC_Annual-Basic input.csv", "PEC_Annual-Diet compostion.csv", pedfile ="PEC_Annual-Pedigree.csv")
PEC_param<-read.rpath.params("C:/Users/AllanaNunes/Desktop/ParanaguaBay_FoodWeb/data/PEC_Annual-Basic input.csv")
